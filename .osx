#
# Contains scripts applicable to Mac OSX
#


# ---[ exports ]---------------------------------------------------------

# http://kassiopeia.juls.savba.sk/~garabik/software/grc/README.txt
source "`brew --prefix grc`/etc/grc.bashrc"

# Install GNU core utilities (those that come with OS X are outdated)
# brew install coreutils
# All commands have been installed with the prefix 'g'.

# If you really need to use these commands with their normal names, you
# can add a "gnubin" directory to your PATH from your bashrc like:

#     PATH="$(brew --prefix coreutils)/libexec/gnubin:$PATH"
# So here is it!
# http://www.gnu.org/software/coreutils/manual/html_node/index.html
export PATH=$(brew --prefix coreutils)/libexec/gnubin:$PATH
export PATH=/Applications/MAMP/Library/bin/:$PATH
export PATH=/usr/local/tranquil/bin:$PATH

# source ~/.rvm/scripts/rvm

export PATH="$(brew --prefix josegonzalez/php/php54)/bin:$PATH"


# ---[ aliases ]---------------------------------------------------------

alias o="open"
alias oo="open ."

# requires github.com/dronir/SpotifyControl
alias spotify="osascript ~/bin/SpotifyControl/SpotifyControl.scpt"

# Get OS X Software Updates, and update installed Ruby gems, Homebrew, npm, and their installed packages
alias update='sudo softwareupdate -i -a; brew update; brew upgrade; brew cleanup; npm update npm -g; npm update -g; sudo gem update'

# Empty the Trash on all mounted volumes and the main HDD
alias emptytrash="sudo rm -rfv /Volumes/*/.Trashes; rm -rfv ~/.Trash"

# Hide/show all desktop icons (useful when presenting)
alias hidedesktop="defaults write com.apple.finder CreateDesktop -bool false && killall Finder"
alias showdesktop="defaults write com.apple.finder CreateDesktop -bool true && killall Finder"

# ---[ functions ]---------------------------------------------------------

# Change working directory to the top-most Finder window location
function cdf() { # short for `cdfinder`
  cd "$(osascript -e 'tell app "Finder" to POSIX path of (insertion location as alias)')"
}

# Set the title of the tab in iterm
function tabname(){
  echo -ne "\033]0;"$@"\007"
}

# Add note to Notes.app (OS X 10.8)
# Usage: `note 'foo'` or `echo 'foo' | note`
function note() {
  local text
  if [ -t 0 ]; then # argument
    text="$1"
  else # pipe
    text=$(cat)
  fi
  body=$(echo "$text" | sed -E 's|$|<br>|g')
  osascript >/dev/null <<EOF
tell application "Notes"
      tell account "iCloud"
            tell folder "Notes"
                  make new note with properties {name:"$text", body:"$body"}
            end tell
      end tell
end tell
EOF
}

# Add reminder to Reminders.app (OS X 10.8)
# Usage: `remind 'foo'` or `echo 'foo' | remind`
function remind() {
  local text
  if [ -t 0 ]; then
    text="$1" # argument
  else
    text=$(cat) # pipe
  fi
  osascript >/dev/null <<EOF
tell application "Reminders"
        tell the default list
                make new reminder with properties {name:"$text"}
        end tell
end tell
EOF
}

################################################################################
##
#   iTerm Tab and Title Customization
#   http://scottlab.ucsc.edu//xtal/iterm_tab_customization.html
################################################################################

function set_title_tab {

    function settab   {

        # file settab  -- invoked only if iTerm or Konsole is running

        #  Set iterm window tab to current directory and penultimate directory if the
        #  shell process is running.  Truncate to leave the rightmost $rlength characters.
        #
        #  Use with functions settitle (to set iterm title bar to current directory)
        #  and chpwd


    if [[ $TERM_PROGRAM == iTerm.app && -z "$KONSOLE_DCOP_SESSION" ]];then

      # The $rlength variable prints only the 20 rightmost characters. Otherwise iTerm truncates
      # what appears in the tab from the left.


        # Chage the following to change the string that actually appears in the tab:

          tab_label="$PWD:h:t/$PWD:t"

          rlength="20"   # number of characters to appear before truncation from the left

                echo -ne "\e]1;${(l:rlength:)tab_label}\a"


    else

        # For KDE konsole tabs

        # Chage the following to change the string that actually appears in the tab:

          tab_label="$PWD:h:t/$PWD:t"

          rlength="20"   # number of characters to appear before truncation from the left

            # If we have a functioning KDE console, set the tab in the same way
            if [[ -n "$KONSOLE_DCOP_SESSION" && ( -x $(which dcop)  )  ]];then
                    dcop "$KONSOLE_DCOP_SESSION" renameSession "${(l:rlength:)tab_label}"
            else
                : # do nothing if tabs don't exist
            fi

    fi
  }

    function settitle   {
    # Function "settitle"  --  set the title of the iterm title bar. use with chpwd and settab

    # Change the following string to change what appears in the Title Bar label:


      title_lab=$HOST:r:r::$PWD
        # Prints the host name, two colons, absolute path for current directory

      # Change the title bar label dynamically:

      echo -ne "\e]2;[zsh]   $title_lab\a"
  }

  # Set tab and title bar dynamically using above-defined functions

    function title_tab_chpwd { settab ; settitle }

    # Now we need to run it:
      title_tab_chpwd

  # Set tab or title bar label transiently to the currently running command

  if [[ "$TERM_PROGRAM" == "iTerm.app" ]];then
    function title_tab_preexec {  echo -ne "\e]1; $(history $HISTCMD | cut -b7- ) \a"  }
    function title_tab_precmd  { settab }
  else
    function title_tab_preexec {  echo -ne "\e]2; $(history $HISTCMD | cut -b7- ) \a"  }
    function title_tab_precmd  { settitle }
  fi


  typeset -ga preexec_functions
  preexec_functions+=title_tab_preexec

  typeset -ga precmd_functions
  precmd_functions+=title_tab_precmd

  typeset -ga chpwd_functions
  chpwd_functions+=title_tab_chpwd

}

####################

set_title_tab

